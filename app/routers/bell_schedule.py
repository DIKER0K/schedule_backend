import json, os
from fastapi import APIRouter, UploadFile, File, HTTPException
from app.database import db
from app.utils.common import normalize_day_name

router = APIRouter(prefix="/bell", tags=["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤"])

MAIN_BELL_FILE = "bell_schedule.json"
OVERRIDE_FILE = "bell_schedule_overrides.json"


# === 1Ô∏è‚É£ –ë–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (–æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ) ===
@router.post("/upload", summary="–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–∞—Ä—ã")
async def upload_bell_schedule(file: UploadFile = File(...)):
    if not file.filename.endswith(".json"):
        raise HTTPException(status_code=400, detail="–ù—É–∂–µ–Ω JSON-—Ñ–∞–π–ª")

    try:
        content = await file.read()
        bell_data = json.loads(content)

        with open(MAIN_BELL_FILE, "w", encoding="utf-8") as f:
            json.dump(bell_data, f, ensure_ascii=False, indent=2)

        updated_count = await _update_all_schedules(bell_data)
        return {"message": f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {updated_count} (–æ—Å–Ω–æ–≤–Ω–æ–µ)", "file_saved": True}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")


# === 2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è ===
@router.post("/upload/special", summary="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–Ω–µ–π")
async def upload_special_bell_schedule(file: UploadFile = File(...)):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    {
      "—Å—Ä–µ–¥–∞": {
        "1_shift": {"1": "09:00‚Äì10:00", "2": "10:10‚Äì11:10"},
        "2_shift": {"1": "11:30‚Äì12:30", "2": "12:40‚Äì13:40"}
      }
    }
    """
    if not file.filename.endswith(".json"):
        raise HTTPException(status_code=400, detail="–ù—É–∂–µ–Ω JSON-—Ñ–∞–π–ª")

    try:
        content = await file.read()
        override_data = json.loads(content)

        with open(OVERRIDE_FILE, "w", encoding="utf-8") as f:
            json.dump(override_data, f, ensure_ascii=False, indent=2)

        # –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π
        updated_count = await _update_all_schedules(override_data, only_days=list(override_data.keys()))

        return {
            "message": f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {updated_count} (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–Ω–∏: {', '.join(override_data.keys())})",
            "file_saved": True,
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")


# === üîß –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π ===
async def _update_all_schedules(bell_data: dict, only_days: list[str] | None = None):
    schedules = await db.schedules.find().to_list(None)
    updated_count = 0

    for s in schedules:
        group_name = s.get("group_name")
        shift_info = s.get("shift_info", {})
        shift = shift_info.get("shift", 1)
        schedule = s.get("schedule", {})
        modified = False

        for section in ["zero_lesson", "days"]:
            for day_name, lessons in schedule.get(section, {}).items():
                normalized_day = normalize_day_name(day_name)

                # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏
                if only_days and normalized_day not in only_days:
                    continue

                key = normalized_day
                if normalized_day in ["–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥"]:
                    key = "–≤—Ç–æ—Ä–Ω–∏–∫-—á–µ—Ç–≤–µ—Ä–≥"

                shift_key = f"{shift}_shift"
                bell_times = bell_data.get(key, {}).get(shift_key, {})

                for lesson_num, lesson_data in lessons.items():
                    time_str = bell_times.get(lesson_num)
                    if time_str:
                        lesson_data["time"] = time_str
                        modified = True

        if modified:
            await db.schedules.update_one(
                {"group_name": group_name},
                {"$set": {"schedule": schedule}}
            )
            updated_count += 1

    return updated_count
