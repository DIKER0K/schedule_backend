from typing import List
from fastapi import APIRouter, Query, UploadFile, File, HTTPException
from datetime import datetime
from bson import ObjectId
from app.database import db
from app.models.schedule import Schedule
from app.models.schedule_upload import UploadResponse
from app.models.teacher_schedule import TeacherScheduleResponse
from app.services.schedule_parser import parse_schedule_from_docx, load_group_shifts, add_classrooms_to_schedule
import re

router = APIRouter()


def serialize_doc(doc):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç ObjectId –≤ str –¥–ª—è JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    if not doc:
        return doc
    doc["_id"] = str(doc["_id"])
    return doc

def normalize_day_name(day: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ (–±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞, —Å–∏–Ω–æ–Ω–∏–º—ã)"""
    if not day:
        return ""
    day = day.strip().lower()
    mapping = {
        "–ø–Ω": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "mon": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "–≤—Ç": "–≤—Ç–æ—Ä–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫": "–≤—Ç–æ—Ä–Ω–∏–∫", "tue": "–≤—Ç–æ—Ä–Ω–∏–∫",
        "—Å—Ä": "—Å—Ä–µ–¥–∞", "—Å—Ä–µ–¥–∞": "—Å—Ä–µ–¥–∞", "wed": "—Å—Ä–µ–¥–∞",
        "—á—Ç": "—á–µ—Ç–≤–µ—Ä–≥", "—á–µ—Ç–≤–µ—Ä–≥": "—á–µ—Ç–≤–µ—Ä–≥", "thu": "—á–µ—Ç–≤–µ—Ä–≥",
        "–ø—Ç": "–ø—è—Ç–Ω–∏—Ü–∞", "–ø—è—Ç–Ω–∏—Ü–∞": "–ø—è—Ç–Ω–∏—Ü–∞", "fri": "–ø—è—Ç–Ω–∏—Ü–∞",
        "—Å–±": "—Å—É–±–±–æ—Ç–∞", "—Å—É–±–±–æ—Ç–∞": "—Å—É–±–±–æ—Ç–∞", "sat": "—Å—É–±–±–æ—Ç–∞",
    }
    return mapping.get(day, day)


def normalize_name(name: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, —Ç–æ—á–∫–∏ –∏ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"""
    if not name:
        return ""
    name = name.strip().replace("\xa0", " ").replace("\u200b", "").replace("\ufeff", "")
    return re.sub(r"[.\s]", "", name).lower()

# üìò –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
@router.get("/", response_model=List[Schedule])
async def get_all_schedules():
    schedules = await db.schedules.find().to_list(100)
    return [Schedule(**serialize_doc(s)) for s in schedules]


@router.get("/{group_name}", response_model=Schedule)
async def get_schedule(
    group_name: str,
    day: str | None = Query(None, description="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –í—Ç, Mon)")
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.
    –û—à–∏–±–∫–∏:
    - 404: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞;
    - 204/404: –≥—Ä—É–ø–ø–∞ –µ—Å—Ç—å, –Ω–æ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –ø–∞—Ä.
    """
    schedule = await db.schedules.find_one({"group_name": group_name})
    if not schedule:
        raise HTTPException(status_code=404, detail=f"–ì—Ä—É–ø–ø–∞ '{group_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    schedule = serialize_doc(schedule)
    shift_info = schedule.get("shift_info", {})

    if not day:
        return Schedule(
            group_name=group_name,
            shift_info=shift_info,
            updated_at=schedule.get("updated_at"),
            schedule=schedule.get("schedule", {})
        )

    normalized_day = normalize_day_name(day)
    schedule_data = schedule.get("schedule", {})
    filtered_schedule = {}

    # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    zero = schedule_data.get("zero_lesson", {})
    for dname, info in zero.items():
        if normalize_day_name(dname) == normalized_day:
            filtered_schedule["zero_lesson"] = {dname: info}

    days = schedule_data.get("days", {})
    for dname, lessons in days.items():
        if normalize_day_name(dname) == normalized_day:
            filtered_schedule["days"] = {dname: lessons}
            break

    # ‚ùó –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –µ—Å—Ç—å, –Ω–æ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –ø–∞—Ä
    if not filtered_schedule:
        raise HTTPException(
            status_code=404,
            detail=f"–£ –≥—Ä—É–ø–ø—ã '{group_name}' –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π –≤ –¥–µ–Ω—å '{day}'"
        )

    return {
        "group_name": group_name,
        "shift_info": shift_info,
        "day": day,
        "filtered_schedule": filtered_schedule,
        "updated_at": schedule.get("updated_at"),
    }


# üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ DOCX —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (—Å –∑–∞–º–µ–Ω–æ–π —Å—Ç–∞—Ä–æ–≥–æ)
@router.post("/upload", response_model=UploadResponse)
async def upload_schedule(
    schedule_file: UploadFile = File(..., description="DOCX —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"),
    shifts_file: UploadFile | None = File(None, description="(–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) JSON —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–º–µ–Ω–∞—Ö")
):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª .docx, –ø–∞—Ä—Å–∏—Ç –µ–≥–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ MongoDB.
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–∞–∫–∂–µ —Ñ–∞–π–ª group_shifts.json ‚Äî –æ–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.
    –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞—é—Ç—Å—è.
    """
    import os, json
    if not schedule_file.filename.lower().endswith(".docx"):
        raise HTTPException(status_code=400, detail="–ù—É–∂–µ–Ω DOCX —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

    temp_docx = f"temp_{datetime.now().timestamp()}.docx"
    temp_json = None

    try:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º docx –≤—Ä–µ–º–µ–Ω–Ω–æ
        with open(temp_docx, "wb") as f:
            content = await schedule_file.read()
            f.write(content)

        # –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ shifts.json ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        if shifts_file:
            temp_json = f"temp_{datetime.now().timestamp()}.json"
            with open(temp_json, "wb") as f:
                content = await shifts_file.read()
                f.write(content)
            # –æ–±–Ω–æ–≤–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª group_shifts.json
            with open(temp_json, "r", encoding="utf-8") as f:
                new_shifts = json.load(f)
            with open("group_shifts.json", "w", encoding="utf-8") as f:
                json.dump(new_shifts, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω —Ñ–∞–π–ª group_shifts.json ({len(new_shifts)} –≥—Ä—É–ø–ø)")

        # –ø–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
        data = parse_schedule_from_docx(temp_docx)
        if not data:
            raise HTTPException(status_code=400, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")

        # –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–º–µ–Ω—ã (—É–∂–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ)
        shifts = load_group_shifts()

        # –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        await db.schedules.delete_many({})

        inserted = []
        first_shift_count = 0
        second_shift_count = 0

        for group, schedule in data.items():
            shift_info = shifts.get(group, {"shift": 1})
            shift_num = shift_info.get("shift", 1)
            if shift_num == 1:
                first_shift_count += 1
            elif shift_num == 2:
                second_shift_count += 1

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–±–∏–Ω–µ—Ç—ã –∏–∑ group_shifts.json
            schedule_with_classrooms = add_classrooms_to_schedule(schedule, group, shifts)

            doc = {
                "group_name": group,
                "schedule": schedule_with_classrooms,  # ‚Üê –¢–µ–ø–µ—Ä—å —Å –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏!
                "shift_info": shift_info,
                "updated_at": datetime.now(),
            }
            result = await db.schedules.insert_one(doc)
            inserted.append(str(result.inserted_id))

        return UploadResponse(
            message=(
                f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–ª—è {len(inserted)} –≥—Ä—É–ø–ø "
                f"({first_shift_count} ‚Äî 1 —Å–º–µ–Ω–∞, {second_shift_count} ‚Äî 2 —Å–º–µ–Ω–∞)"
            ),
            inserted_ids=inserted,
            total_groups=len(inserted),
            first_shift=first_shift_count,
            second_shift=second_shift_count
        )

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {e}")

    finally:
        for path in [temp_docx, temp_json]:
            if path and os.path.exists(path):
                os.remove(path)


# ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
@router.delete("/{group_name}")
async def delete_schedule(group_name: str):
    result = await db.schedules.delete_one({"group_name": group_name})
    if result.deleted_count == 0:
        raise HTTPException(status_code=404, detail="Schedule not found")
    return {"message": f"Schedule for '{group_name}' deleted"}


def normalize_name(name: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, —Ç–æ—á–∫–∏ –∏ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"""
    if not name:
        return ""
    name = name.strip().replace("\xa0", " ").replace("\u200b", "").replace("\ufeff", "")
    # —É–±—Ä–∞—Ç—å –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–æ—á–∫–∏, –≤—Å—ë –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    return re.sub(r"[.\s]", "", name).lower()

@router.get("/teacher/{fio:path}", response_model=TeacherScheduleResponse)
async def get_teacher_schedule(
    fio: str,
    day: str | None = Query(None, description="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –í—Ç, Mon)")
):
    """
    –ì–∏–±–∫–∏–π –ø–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.
    –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –æ—à–∏–±–∫–∏:
    - 404: –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ–æ–±—â–µ;
    - 204: –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å —É –Ω–µ–≥–æ –Ω–µ—Ç –ø–∞—Ä.
    """
    fio = fio.strip()
    if not fio:
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")

    fio_normalized = normalize_name(fio)
    normalized_day = normalize_day_name(day) if day else None

    schedules = await db.schedules.find().to_list(1000)
    teacher_found_anywhere = False  # üëà –æ—Ç–º–µ—Ç–∏–º, —á—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤–æ–æ–±—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    teacher_schedule = {"first_shift": {}, "second_shift": {}}

    for s in schedules:
        group_name = s.get("group_name")
        schedule_data = s.get("schedule", {})
        if not schedule_data:
            continue

        shift = (s.get("shift_info") or {}).get("shift", 1)
        shift_key = "first_shift" if shift == 1 else "second_shift"

        def match_teacher(teacher: str) -> bool:
            if not teacher:
                return False
            t_norm = normalize_name(teacher)
            return fio_normalized in t_norm or t_norm in fio_normalized

        # –Ω—É–ª–µ–≤–∞—è –ø–∞—Ä–∞
        for day_name, zero in (schedule_data.get("zero_lesson") or {}).items():
            if zero and match_teacher(zero.get("teacher", "")):
                teacher_found_anywhere = True
                if not normalized_day or normalize_day_name(day_name) == normalized_day:
                    teacher_schedule[shift_key].setdefault(day_name, {})
                    teacher_schedule[shift_key][day_name]["0"] = {
                        "subject": zero.get("subject", ""),
                        "group": group_name,
                        "classroom": zero.get("classroom", "")
                    }

        # –æ–±—ã—á–Ω—ã–µ –ø–∞—Ä—ã
        for day_name, lessons in (schedule_data.get("days") or {}).items():
            for num, info in (lessons or {}).items():
                if info and match_teacher(info.get("teacher", "")):
                    teacher_found_anywhere = True
                    if not normalized_day or normalize_day_name(day_name) == normalized_day:
                        teacher_schedule[shift_key].setdefault(day_name, {})
                        teacher_schedule[shift_key][day_name][num] = {
                            "subject": info.get("subject", ""),
                            "group": group_name,
                            "classroom": info.get("classroom", "")
                        }

    # ‚ùå –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    if not teacher_found_anywhere:
        raise HTTPException(status_code=404, detail=f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å '{fio}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")

    # ‚ùó –ï—Å–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –Ω–æ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –ø–∞—Ä
    if normalized_day and not any(teacher_schedule["first_shift"].values()) and not any(teacher_schedule["second_shift"].values()):
        raise HTTPException(status_code=404, detail=f"–£ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è '{fio}' –Ω–µ—Ç –ø–∞—Ä –≤ –¥–µ–Ω—å '{day}'")

    # ‚úÖ –í—Å—ë —Ö–æ—Ä–æ—à–æ
    return TeacherScheduleResponse(
        teacher_fio=fio,
        filtered_by_day=day if day else None,
        schedule=teacher_schedule
    )